Tom's port notes from 2020.

Steinberg hates VST2SDK now and is trying to expunge it from the internet.
But I found my old copy from like 2001 (matching the file sizes in the vstsdk/README). Unknown whether it works with 64 bit yet.

We could port to VST3, and this would be preferable, but it looks somewhat
painful. At least the way dfx-library is set up, we could add a TARGET_API_VST3 (maybe rename the current one to VST2, maybe even do that anyway) and do
this without necessarily disrupting the VST2 build.

Our plugins implement DfxPlugin, which itself can be compiled as an AU
or VST (maybe other stuff) and have various features turned on and off; these
are all compile-time settings through #defines. In VST (2) mode, it implements
AudioEffectX. (I think AudioEffect is like VST1 even?)


OK so the header versions from 2001 probably won't work, because they
use "long" (which is likely 64 bit in 2020) when they mean int32. I
think this may be part of the external interface and really is expected
to be 32 bit.

Looks like at some point this type was replaced with VstInt32. So instead
I grabbed the headers from pluginterfaces/vst2.x/ inside vst-sdk_3.6.14.


... Well, I compiled a DLL (without GUI).

Here's what mingw gendef (compiled it myself, in d:\temp\mingw...something...tools...\gendef) shows
for a working plugin:

$ ./gendef.exe - "c:\Program Files\Steinberg\VstPlugins\iZVocalDoubler.dll"
 * [c:\Program Files\Steinberg\VstPlugins\iZVocalDoubler.dll] Found PE+ image
;
; Definition file of iZVocalDoubler.dll
; Automatic generated by gendef
; written by Kai Tietz 2008
;
LIBRARY "iZVocalDoubler.dll"
EXPORTS
PluginCoreCallback
RWDEFCloseDevice
RWDEFDriveAudio
RWDEFGetDeviceInfo
RWDEFGetDeviceNameAndVersion
RWDEFGetDeviceSignature
RWDEFGetEventBusInfo
RWDEFGetEventChannelInfo
RWDEFGetEventControllerInfo
RWDEFGetEventInfo
RWDEFGetEventNoteInfo
RWDEFIdle
RWDEFIsCloseOK
RWDEFIsPanelAppLaunched
RWDEFLaunchPanelApp
RWDEFOpenDevice
RWDEFQuitPanelApp
RWDEFSetAudioInfo


$ ./gendef.exe - "c:\code\destroyfx\transverb\win32\dfx-transverb-64.dll"
 * [c:\code\destroyfx\transverb\win32\dfx-transverb-64.dll] Found PE+ image
;
; Definition file of dfx-transverb-64.dll
; Automatic generated by gendef
; written by Kai Tietz 2008
;
LIBRARY "dfx-transverb-64.dll"
EXPORTS
MAIN
VSTPluginMain
_Z11besselIZerof
_Z12besselIZero2f
_Z20createEffectInstancePFxP7AEffectiixPvfE
_ZN10AEffEditor11setKnobModeEi
_ZN10AEffEditor4idleEv
_ZN10AEffEditor4openEPv
... and a jillion more ...

So are we supposed to be exporting PluginCoreCallback somehow?

actually maybe the iZ version is actually some other format. Here's "Vocal Doubler.dll":

$ ./gendef.exe - "c:\Program Files\Steinberg\VstPlugins\Vocal Doubler.dll"
 * [c:\Program Files\Steinberg\VstPlugins\Vocal Doubler.dll] Found PE+ image
;
; Definition file of PluginHooksVST.dll
; Automatic generated by gendef
; written by Kai Tietz 2008
;
LIBRARY "PluginHooksVST.dll"
EXPORTS
GetPluginFactory
PluginHookCallback
VSTPluginMain
main


GetPluginFactory appears to be VST3: https://sdk.steinberg.net/viewtopic.php?t=521
PluginHookCallbakc appears to be iZotope (made vocal doubler) specific (only hit
for "PluginHookCallback VST" is iZotope being identified as malware, has strings dump)



The 64-bit headers differ in a number of places dfx transverb:
Magic      523
MajorLinkerVersion        02
MinorLinkerVersion         22
SizeOfCode          155648
SizeOfInitializedData    223232
SizeOfUninitializedData        5120
AddressOfEntryPoint        4912
BaseOfCode          4096
ImageBase            1790181376
SectionAlignment              4096
FileAlignment    512
MajorOperatingSystemVersion        4
MinorOperatingSystemVersion        0
MajorImageVersion            0
MinorImageVersion            0
MajorSubsystemVersion    5
MinorSubsystemVersion    2
Win32VersionValue            0
SizeOfImage        659456
SizeOfHeaders    1536
CheckSum              770609
Subsystem            3
DllCharacteristics          0
SizeOfStackReserve          2097152
SizeOfStackCommit            4096
SizeOfHeapReserve            1048576
SizeOfHeapCommit              4096
LoaderFlags        0
NumberOfRvaAndSizes        16

vocal doubler:
Magic      523
MajorLinkerVersion        0e
MinorLinkerVersion         10
SizeOfCode          2712064
SizeOfInitializedData    1749504
SizeOfUninitializedData        0
AddressOfEntryPoint        1743044
BaseOfCode          4096
ImageBase            6442450944
SectionAlignment              4096
FileAlignment    512
MajorOperatingSystemVersion        6
MinorOperatingSystemVersion        0
MajorImageVersion            0
MinorImageVersion            0
MajorSubsystemVersion    6
MinorSubsystemVersion    0
Win32VersionValue            0
SizeOfImage        4505600
SizeOfHeaders    1024
CheckSum              0
Subsystem            2
DllCharacteristics          352
SizeOfStackReserve          1048576
SizeOfStackCommit            4096
SizeOfHeapReserve            1048576
SizeOfHeapCommit              4096
LoaderFlags        0
NumberOfRvaAndSizes        16


the OS and subsystem versions seem to indicate that the mingw dll will work on older windowses, which is fine.
Subsystem is interesting. vocal-doubler is IMAGE_SUBSYSTEM_WINDOWS_GUI and mingw is IMAGE_SUBSYSTEM_WINDOWS_CUI.
-mwindows ? https://gcc.gnu.org/onlinedocs/gcc/x86-Windows-Options.html
(yes this works, also there is --Wl,--subsystem,windows or something like that)


With __declspec(dllexport) _cdecl on VSTPluginMain, it looks like we ONLY export that symbol now.
This seems better?

Still no loady though.

vocal-doubler has these DllCharacteristics (352 = 0x160):

IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA 0x0020
Image can handle a high entropy 64-bit virtual address space.
IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE 0x0040
DLL can be relocated at load time.
IMAGE_DLLCHARACTERISTICS_NX_COMPAT 0x0100
Image is NX compatible.

probably 20 and 100 are security stuff we can ignore for this case, but dynamic base might be important?
Actually dynamic base is ASLR (address space randomization) support, so all three of these are probably
just for that and unnecessary.


Added some hacky message box / file log style debugging to vstplugmain, and it looks like it's never called.
So does VstPlugMain not link, or it can't dlopen or whatever?


OK, so trying to load it myself with LoadLibraryExA, it just fails:

$ ./load.exe vocal-doubler.dll

Tom@STARTROPICS /c/code/destroyfx/transverb/win32
$ ./load.exe dfx-transverb-64.dll
Failed:
LoadLibraryExA failed (null) failed with error 193: %1 is not a valid Win32 appl
ication.

several internet sources claim this actually means it is a 32-bit DLL. (Or at least this
would be a symptom...) Indeeed if I pass most other garbage to load.exe (e.g. resources.o renamed
to resources.dll) it gives me a different error "5: access denied".


x86_64-w64-mingw32-objdump -x file.dll
is a good way to look at details. The dlls are pretty similar aside from the header differences
noted above. One thing that jumps out is that transverb needs two GCC DLLs:

 00034000       000340a0 00000000 00000000 000350a0 00034418

        DLL Name: libgcc_s_seh-1.dll
        vma:  Hint/Ord Member-Name Bound-To
        34790      15  _Unwind_Resume
        347a4     105  __popcountdi2

 00034014       000340b8 00000000 00000000 00035130 00034430

        DLL Name: libstdc++-6.dll
        vma:  Hint/Ord Member-Name Bound-To
        347b4    1115  _ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEy
        347ec    1116  _ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEyyy

... which maybe LoadLibrary is not finding?

another thing I could imagine is that vocal-doubler has a "main" exported.

both files have a bunch of "xdata section corrupt" stuff, so I don't think that's a real problem.


-static-libgcc -static-libstdc++ to the linker do successfully remove imports for these dlls, nice
(but there is libwinpthread-1.dll)

just putting libwinpthread-1.dll in the pwd allows ./load.exe to load it, then (what a useless
error message??!). We see the MessageBoxA and log output (DllMain).

cakewalk still does not care for it, and doesn't show message boxes. It might not be finding the dll
(even when I put it in vstplugins too?) or there might still be a problem with the way VSTPluginMain is
exported.

Can we link (only) pthreads statically?
Well, you can include it on the linker command line as an object (the .a):
/usr/x86_64-w64-mingw32/sys-root/mingw/lib/libwinpthread.a

and now load.exe works without pthread dll in the cwd.

and now bandcamp at least calls the DllMain MessageBox, and creates and returns the effect!

(Note that bandcamp definitely needs you to do utilities ... plugin manager ... scan vst plug-ins (and check
those options) even if you replace the dll.)


When I add the plugin it's definitely doing something (shows builtin ui with parameters and some reasonable
default settings) but then also crashes:

"unhandled exception"
exception code c0000005
address nonzero:zero:00000000...00065

c0000005 is an access violation, so it's probably just crashing due to some busted vst code
(which I have some chance of debugging now...!)
